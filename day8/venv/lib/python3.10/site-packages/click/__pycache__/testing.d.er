##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/click/testing.py 1736025949 16282
.contextlib = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.io = pyimport "<failure>"


.os = pyimport "<failure>"


.shlex = pyimport "<failure>"


.shutil = pyimport "<failure>"


.sys = pyimport "<failure>"


.tempfile = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_1 = pyimport "types"
.types = pyimport "types"
.TracebackType: Never
.___v_desugar_2 = pyimport "__init__"
.__init__ = pyimport "__init__"
._compat: Never
.___v_desugar_3 = pyimport "__init__"

.formatting: Never
.___v_desugar_4 = pyimport "__init__"

.termui: Never
.___v_desugar_5 = pyimport "__init__"

.utils: Never
.___v_desugar_6 = pyimport "_compat"
._compat = pyimport "_compat"
._find_binary_reader: (stream: global::Readable!) -> {None}

.EchoingStdin: ClassType
.EchoingStdin._input: Never
.EchoingStdin._output: Never
.EchoingStdin._paused: Never
.EchoingStdin.__call__: (input: Obj, output: Obj) -> click.testing.EchoingStdin
.EchoingStdin.__getattr__: (self: click.testing.EchoingStdin, x: Str) -> Never
.EchoingStdin._echo: (self: click.testing.EchoingStdin, rv: global::Bytes) -> global::Bytes
.EchoingStdin.read: (self: click.testing.EchoingStdin, n: Int := Int) -> global::Bytes
.EchoingStdin.read1: (self: click.testing.EchoingStdin, n: Int := Int) -> global::Bytes
.EchoingStdin.readline: (self: click.testing.EchoingStdin, n: Int := Int) -> global::Bytes
.EchoingStdin.readlines: (self: click.testing.EchoingStdin) -> global::List!(global::Bytes, _: Nat)
.EchoingStdin.__iter__: |I <: global::Iterable(?T), T: Type|(self: click.testing.EchoingStdin) -> ?I.Iterator
.EchoingStdin.__repr__: (self: click.testing.EchoingStdin) -> Str

._pause_echo: |Type_45521: Type, Type_45520: Type, Type_45105 <: Structural({._paused = ?45520 and ?45521})|(stream: Type_45105) -> NoneType
.Type__NamedTextIOWrapper: ClassType
.Type__NamedTextIOWrapper <: Never
.Type__NamedTextIOWrapper._mode: Never
.Type__NamedTextIOWrapper._name: Never
.Type__NamedTextIOWrapper.__call__: (buffer: Obj, name: Str, mode: Str, **kwargs := Obj) -> click.testing.Type__NamedTextIOWrapper
.Type__NamedTextIOWrapper.name: (self: click.testing.Type__NamedTextIOWrapper) -> Str
.Type__NamedTextIOWrapper.mode: (self: click.testing.Type__NamedTextIOWrapper) -> Str

.make_input_stream: (input: Obj, charset: Str) -> Never
.Result: ClassType

.CliRunner: ClassType
.CliRunner.charset: Str
.CliRunner.echo_stdin: Bool
.CliRunner.mix_stderr: Bool
.CliRunner.env: Never
.CliRunner.__call__: (charset: Str := Str, env: Obj := Obj, echo_stdin: Bool := Bool, mix_stderr: Bool := Bool) -> click.testing.CliRunner
.CliRunner.get_default_prog_name: (self: click.testing.CliRunner, cli: core.BaseCommand) -> Str
.CliRunner.make_env: (self: click.testing.CliRunner, overrides: Bool := Bool) -> global::Dict({Never: Never})
.CliRunner.isolation: (self: click.testing.CliRunner, input: Obj := Obj, env: global::Dict({Never: Never}) := global::Dict({Never: Never}), color: Bool := Bool) -> Never
.CliRunner.invoke: (self: click.testing.CliRunner, cli: core.BaseCommand, args: Structural({.__or__ = (self: Never, Obj) -> Never}) := {None} and Structural({.__or__ = (self: Never, Obj) -> Never}), input: Obj := {None}, env: global::Dict({Never: Never}) := {None} and global::Dict({Never: Never}), catch_exceptions: Bool := {True} and Bool, color: Bool := {False} and Bool, **extra := Obj) -> Never
.CliRunner.isolated_filesystem: (self: click.testing.CliRunner, temp_dir: Obj := Obj) -> Never

