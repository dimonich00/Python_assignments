##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/click/utils.py 1736025949 20330
.os = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.re = pyimport "<failure>"


.sys = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_1 = pyimport "<failure>"

.update_wrapper: Never
.___v_desugar_2 = pyimport "types"
.types = pyimport "types"
.GeneticModule: Never
.___v_desugar_3 = pyimport "types"

.TracebackType: Never
.___v_desugar_4 = pyimport "_compat"
._compat = pyimport "_compat"
._default_text_stderr: () -> Never
.___v_desugar_5 = pyimport "_compat"

._default_text_stdout: () -> Never
.___v_desugar_6 = pyimport "_compat"

._find_binary_writer: (stream: global::Writable!) -> {None}
.___v_desugar_7 = pyimport "_compat"

.auto_wrap_for_ansi: Never
.___v_desugar_8 = pyimport "_compat"

.binary_streams: Never
.___v_desugar_9 = pyimport "_compat"

.open_stream: |Type_2396 :> {None}, Type_2396 <: NoneType or Str|(filename: Obj, mode: Str := Str, encoding: Type_2396 := Type_2396, errors: Type_2396 := Type_2396, atomic: Bool := Bool) -> global::Tuple([Never, {True}])
.___v_desugar_10 = pyimport "_compat"

.should_strip_ansi: (stream: global::IO! := global::IO!, color: Bool := Bool) -> Bool
.___v_desugar_11 = pyimport "_compat"

.strip_ansi: (value: Str) -> Str
.___v_desugar_12 = pyimport "_compat"

.text_streams: Never
.___v_desugar_13 = pyimport "_compat"

.WIN: Never
.___v_desugar_14 = pyimport "globals"
.globals = pyimport "globals"
.resolve_color_default: (color: Obj := Obj) -> {None}

.R: Never
._posixify: (name: Str) -> Str
.safecall: (func: Obj) -> Never
.make_str: (value: Obj) -> Str
.make_default_short_help: (help: Str, max_length: Int := Int) -> Str
.LazyFile: ClassType
.LazyFile.mode: Str
.LazyFile.encoding: Never
.LazyFile.atomic: Bool
.LazyFile.name: Str
.LazyFile.errors: Never
.LazyFile.__call__: (filename: Obj, mode: Str := Str, encoding: Obj := Obj, errors: Obj := Obj, atomic: Bool := Bool) -> utils.LazyFile
.LazyFile.__getattr__: (self: utils.LazyFile, name: Str) -> Never
.LazyFile.__repr__: (self: utils.LazyFile) -> Str
.LazyFile.open: (self: utils.LazyFile) -> Never
.LazyFile.close: (self: utils.LazyFile) -> NoneType
.LazyFile.close_intelligently: (self: utils.LazyFile) -> NoneType
.LazyFile.__enter__: (self: utils.LazyFile) -> utils.LazyFile
.LazyFile.__exit__: (self: utils.LazyFile, exc_type: Obj, exc_value: Obj, tb: Obj) -> NoneType
.LazyFile.__iter__: |I <: global::Iterable(?T), T: Type|(self: utils.LazyFile) -> ?I.Iterator

.KeepOpenFile: ClassType
.KeepOpenFile._file: Never
.KeepOpenFile.__call__: (file: Obj) -> utils.KeepOpenFile
.KeepOpenFile.__getattr__: (self: utils.KeepOpenFile, name: Str) -> Never
.KeepOpenFile.__enter__: (self: utils.KeepOpenFile) -> utils.KeepOpenFile
.KeepOpenFile.__exit__: (self: utils.KeepOpenFile, exc_type: Obj, exc_value: Obj, tb: Obj) -> NoneType
.KeepOpenFile.__repr__: (self: utils.KeepOpenFile) -> Str
.KeepOpenFile.__iter__: |I <: global::Iterable(?T), T: Type|(self: utils.KeepOpenFile) -> ?I.Iterator

.echo: (message: Never := Never, file: global::Writable! := global::Writable!, nl: Bool := Bool, err: Bool := Bool, color: {None} := {None}) -> NoneType
.get_binary_stream: (name: Obj) -> Never
.get_text_stream: (name: Obj, encoding: Obj := Obj, errors: Obj := Obj) -> Never
.open_file: |Type_2396 :> {None}, Type_2396 <: NoneType or Str|(filename: Obj, mode: Str := Str, encoding: Type_2396 := Type_2396, errors: Type_2396 := Type_2396, lazy: Bool := Bool, atomic: Bool := Bool) -> Never
.format_filename: (filename: Obj, shorten: Bool := Bool and Bool) -> Str
.get_app_dir: (app_name: Str, roaming: Bool := Bool, force_posix: Bool := Bool) -> Str
.PacifyFlushWrapper: ClassType
.PacifyFlushWrapper.wrapped: Never
.PacifyFlushWrapper.__call__: (wrapped: Obj) -> utils.PacifyFlushWrapper
.PacifyFlushWrapper.flush: (self: utils.PacifyFlushWrapper) -> NoneType
.PacifyFlushWrapper.__getattr__: (self: utils.PacifyFlushWrapper, attr: Str) -> Never

._detect_program_name: (path: Bool := Bool, _main: Structural({.__package__ = Obj}) := Structural({.__package__ = Obj})) -> Str
._expand_args: |T: Type|(args: global::Iterable(T), user: Bool := Bool, env: Bool := Bool, glob_recursive: Bool := Bool) -> global::List!(T, _: Nat)
