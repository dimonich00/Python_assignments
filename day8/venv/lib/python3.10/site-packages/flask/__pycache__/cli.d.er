##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/flask/cli.py 1736025949 37093
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.ast = pyimport "<failure>"


.cabc = pyimport "<failure>"


.importlib = pyimport "<failure>"


.inspect = pyimport "<failure>"


.os = pyimport "<failure>"


.platform = pyimport "<failure>"


.re = pyimport "<failure>"


.sys = pyimport "<failure>"


.traceback = pyimport "<failure>"


.t = pyimport "typing"
.typing = pyimport "typing"

.___v_desugar_2 = pyimport "<failure>"

.update_wrapper: Never
.___v_desugar_3 = pyimport "<failure>"

.itemgetter: Never
.___v_desugar_4 = pyimport "<failure>"

.GeneticModule: Never
.click = pyimport "__init__"
.__init__ = pyimport "__init__"

.___v_desugar_5 = pyimport "core"
.core = pyimport "core"
.ParameterSource: {core.ParameterSource}
.___v_desugar_6 = pyimport "__init__"

.run_simple: (hostname: Str, port: Int, application: Obj, use_reloader: Bool := Bool, use_debugger: Bool := Bool, use_evalex: Bool := Bool, extra_files: Obj := Obj, exclude_patterns: Obj := Obj, reloader_interval: Int := Int, reloader_type: Str := Str, threaded: Bool := Bool, processes: Int := Int, request_handler: Obj := Obj, static_files: NoneType or global::Dict!({Str: global::Tuple([Str, Str]) or Str}) := NoneType or global::Dict!({Str: global::Tuple([Str, Str]) or Str}), passthrough_errors: Bool := Bool, ssl_context: Obj := Obj) -> NoneType
.___v_desugar_7 = pyimport "serving"
.serving = pyimport "serving"
.is_running_from_reloader: () -> Bool
.___v_desugar_8 = pyimport "utils"
.utils = pyimport "utils"
.import_string: (import_name: Str, silent: Bool := Bool) -> Never
.___v_desugar_9 = pyimport "globals"
.globals = pyimport "globals"
.current_app: Never
.___v_desugar_10 = pyimport "helpers"
.helpers = pyimport "helpers"
.get_debug_flag: () -> Bool
.___v_desugar_11 = pyimport "helpers"

.get_load_dotenv: (default: Bool := Bool) -> Bool

.NoAppException: ClassType
.NoAppException <: Never

.find_best_app: (module: Obj) -> app.Flask
._called_with_wrong_args: |T <: Structural({.__code__ = ?61267}), Type_61267: Type|(f: T) -> Bool
.find_app_by_string: (module: Obj, app_name: Str) -> app.Flask
.prepare_import: (path: Str) -> Str
.locate_app: (module_name: Str, app_name: NoneType or Str, raise_if_not_found: Obj := Obj) -> app.Flask
.locate_app: (module_name: Str, app_name: NoneType or Str, raise_if_not_found: Obj := Obj) -> NoneType or app.Flask
.locate_app: (module_name: Str, app_name: NoneType or Str, raise_if_not_found: Bool := Bool) -> NoneType or app.Flask
.get_version: (ctx: Obj, param: Obj, value: Obj) -> NoneType
.version_option: Never
.ScriptInfo: ClassType
.ScriptInfo.app_import_path: NoneType or Str
.ScriptInfo.create_app: Never
.ScriptInfo._loaded_app: NoneType or app.Flask
.ScriptInfo.data: global::Dict!({Never: Never})
.ScriptInfo.load_dotenv_defaults: Bool
.ScriptInfo.set_debug_flag: Bool
.ScriptInfo.__call__: (app_import_path: NoneType or Str := NoneType or Str, create_app: Obj := Obj, set_debug_flag: Bool := Bool, load_dotenv_defaults: Bool := Bool) -> cli.ScriptInfo
.ScriptInfo.load_app: (self: cli.ScriptInfo) -> app.Flask

.pass_script_info: (f: Obj) -> Never
.F: Never
.with_appcontext: (f: Obj) -> Never
.AppGroup: ClassType
.AppGroup <: Never
.AppGroup.command: (self: cli.AppGroup, *args: Obj, **kwargs := Obj) -> (f: Obj) -> Never
.AppGroup.group: (self: cli.AppGroup, *args: Obj, **kwargs := Obj) -> Never

._set_app: (ctx: Obj, param: Obj, value: NoneType or Str) -> NoneType or Str
._app_option: Never
._set_debug: (ctx: Obj, param: Obj, value: Bool) -> NoneType or Bool
._debug_option: Never
._env_file_callback: (ctx: Obj, param: Obj, value: NoneType or Str) -> NoneType or Str
._env_file_option: Never
.FlaskGroup: ClassType
cli = pyimport "cli"
.FlaskGroup <: .AppGroup
.FlaskGroup._loaded_plugin_commands: Never
.FlaskGroup.load_dotenv: Bool
.FlaskGroup.set_debug_flag: Bool
.FlaskGroup.create_app: Never
.FlaskGroup.__call__: (add_default_commands: Bool := Bool, create_app: Obj := Obj, add_version_option: Bool := Bool, load_dotenv: Bool := Bool, set_debug_flag: Bool := Bool, **extra := Obj) -> cli.FlaskGroup
.FlaskGroup._load_plugin_commands: (self: cli.FlaskGroup) -> NoneType
.FlaskGroup.get_command: (self: cli.FlaskGroup, ctx: Obj, name: Str) -> Never
.FlaskGroup.list_commands: (self: cli.FlaskGroup, ctx: Obj) -> global::List!(Str, _: Nat)
.FlaskGroup.make_context: (self: cli.FlaskGroup, info_name: NoneType or Str, args: global::List!(Str, _: Nat), parent: Obj := Obj, **extra := Obj) -> Never
.FlaskGroup.parse_args: (self: cli.FlaskGroup, ctx: Obj, args: global::List!(Str, _: Nat)) -> global::List!(Str, _: Nat)

._path_is_ancestor: (path: Str, other: Str) -> Bool
.load_dotenv: (path: NoneType or Str := NoneType or Str, load_defaults: Bool := Bool) -> Bool
.show_server_banner: (debug: Bool, app_import_path: NoneType or Str) -> NoneType
.CertParamType: ClassType
.CertParamType <: Never
.CertParamType.path_type: Never
.CertParamType.__call__: () -> cli.CertParamType
.CertParamType.name: {"path"}
.CertParamType.convert: (self: cli.CertParamType, value: Obj, param: Obj, ctx: Obj) -> Never

._validate_key: (ctx: Obj, param: Obj, value: Obj) -> Never
.SeparatedPathType: ClassType
.SeparatedPathType <: Never
.SeparatedPathType.convert: (self: cli.SeparatedPathType, value: Obj, param: Obj, ctx: Obj) -> Never

.run_command: (info: cli.ScriptInfo, host: Str, port: Int, reload: Bool, debugger: Bool, with_threads: Bool, cert: Obj, extra_files: NoneType or global::List!(Str, _: Nat), exclude_patterns: NoneType or global::List!(Str, _: Nat)) -> NoneType

.shell_command: () -> NoneType
.routes_command: (sort: Str, all_methods: Bool) -> NoneType
.cli: .FlaskGroup
.main: () -> NoneType

