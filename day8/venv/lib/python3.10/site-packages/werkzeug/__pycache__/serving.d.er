##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/serving.py 1736025949 39857

.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.errno = pyimport "<failure>"


.io = pyimport "<failure>"


.os = pyimport "<failure>"


.selectors = pyimport "<failure>"


.socket = pyimport "<failure>"


.socketserver = pyimport "<failure>"


.sys = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.dt: Never
.___v_desugar_3 = pyimport "<failure>"

.timedelta: Never
.___v_desugar_4 = pyimport "<failure>"

.timezone: Never
.___v_desugar_5 = pyimport "<failure>"

.BaseHTTPRequestHandler: Never
.___v_desugar_6 = pyimport "<failure>"

.HTTPServer: Never
.___v_desugar_7 = pyimport "<failure>"

.unquote: Never
.___v_desugar_8 = pyimport "<failure>"

.urlsplit: Never
.___v_desugar_9 = pyimport "_internal"
._internal = pyimport "_internal"
._log: (Type: Str, message: Str, *args: Obj, **kwargs := Obj) -> NoneType
.___v_desugar_10 = pyimport "_internal"

._wsgi_encoding_dance: (s: Str) -> Str
.___v_desugar_11 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.InternalServerError: {werkzeug.exceptions.InternalServerError}
.___v_desugar_12 = pyimport "urls"
.urls = pyimport "urls"
.uri_to_iri: (uri: Str) -> Str
.ssl = pyimport "<failure>"


.connection_dropped_errors: Never
.Type__SslDummy: ClassType
.Type__SslDummy.__call__: () -> serving.Type__SslDummy
.Type__SslDummy.__getattr__: (self: serving.Type__SslDummy, name: Str) -> Never

.ssl: Never
.connection_dropped_errors: Never

._log_add_style: {True}

.can_fork: {os in Structural({.fork = Obj})}

.af_unix: Never
.af_unix: Never

.LISTEN_QUEUE: {128}
._TSSLContextArg: Never

.DechunkedInput: ClassType
.DechunkedInput <: Never
.DechunkedInput._done: Never
.DechunkedInput._len: Never
.DechunkedInput._rfile: Never
.DechunkedInput.__call__: (rfile: Obj) -> serving.DechunkedInput
.DechunkedInput.readable: (self: serving.DechunkedInput) -> Bool
.DechunkedInput.read_chunk_len: (self: serving.DechunkedInput) -> Int
.DechunkedInput.readinto: (self: serving.DechunkedInput, buf: global::ByteArray!) -> Int

.WSGIRequestHandler: ClassType
.WSGIRequestHandler <: Never
.WSGIRequestHandler.server: Never
.WSGIRequestHandler.server_version: (self: serving.WSGIRequestHandler) -> Str
.WSGIRequestHandler.make_environ: (self: serving.WSGIRequestHandler) -> Never
.WSGIRequestHandler.run_wsgi: (self: serving.WSGIRequestHandler) -> NoneType
.WSGIRequestHandler.handle: (self: serving.WSGIRequestHandler) -> NoneType
.WSGIRequestHandler.connection_dropped: (self: serving.WSGIRequestHandler, error: global::BaseException, environ: Obj := Obj) -> NoneType
.WSGIRequestHandler.__getattr__: (self: serving.WSGIRequestHandler, name: Str) -> Never
.WSGIRequestHandler.address_string: (self: serving.WSGIRequestHandler) -> Str
.WSGIRequestHandler.port_integer: (self: serving.WSGIRequestHandler) -> Int
.WSGIRequestHandler._control_char_table: Never
.WSGIRequestHandler.log_request: (self: serving.WSGIRequestHandler, code: Int or Str := Int or Str, size: Int or Str := Int or Str) -> NoneType
.WSGIRequestHandler.log_error: (self: serving.WSGIRequestHandler, format: Str, *args: Obj) -> NoneType
.WSGIRequestHandler.log_message: (self: serving.WSGIRequestHandler, format: Str, *args: Obj) -> NoneType
.WSGIRequestHandler.log: (self: serving.WSGIRequestHandler, Type: Str, message: Str, *args: Obj) -> NoneType

._ansi_style: (value: Str, *styles: Str) -> Str
.generate_adhoc_ssl_pair: (cn: NoneType or Str := NoneType or Str) -> global::Tuple([Never, Never])
.make_ssl_devcert: (base_path: Str, host: NoneType or Str := NoneType or Str, cn: NoneType or Str := NoneType or Str) -> global::Tuple([Str, Str])
.generate_adhoc_ssl_context: () -> Never
.load_ssl_context: (cert_file: Str, pkey_file: NoneType or Str := NoneType or Str, protocol: NoneType or Int := {None} and NoneType or Int) -> Never
.is_ssl_error: (error: NoneType or global::Exception := NoneType or global::Exception) -> Bool
.select_address_family: (host: Str, port: Int) -> Never
.get_sockaddr: (host: Str, port: Int, family: Obj) -> global::Tuple([Str, Int]) or Str
.get_interface_ip: (family: Obj) -> Str
.BaseWSGIServer: ClassType
.BaseWSGIServer <: Never
.BaseWSGIServer.port: Int
.BaseWSGIServer.passthrough_errors: Bool
.BaseWSGIServer._server_version: Never
.BaseWSGIServer.host: Str
.BaseWSGIServer.app: Never
.BaseWSGIServer.__call__: (host: Str, port: Int, app: Obj, handler: Obj := Obj, passthrough_errors: Bool := Bool, ssl_context: Obj := Obj, fd: NoneType or Int := NoneType or Int) -> serving.BaseWSGIServer
.BaseWSGIServer.multithread: {False}
.BaseWSGIServer.multiprocess: {False}
.BaseWSGIServer.request_queue_size: {128}
.BaseWSGIServer.allow_reuse_address: {True}
.BaseWSGIServer.log: (self: serving.BaseWSGIServer, Type: Str, message: Str, *args: Obj) -> NoneType
.BaseWSGIServer.serve_forever: (self: serving.BaseWSGIServer, poll_interval: Float := Float) -> NoneType
.BaseWSGIServer.handle_error: (self: serving.BaseWSGIServer, request: Obj, client_address: global::Tuple([Str, Int]) or Str) -> NoneType
.BaseWSGIServer.log_startup: (self: serving.BaseWSGIServer) -> NoneType

.ThreadedWSGIServer: ClassType
.ThreadedWSGIServer <: Never
.ThreadedWSGIServer.multithread: {True}
.ThreadedWSGIServer.daemon_threads: {True}

.ForkingWSGIServer: ClassType
.ForkingWSGIServer <: Never
.ForkingWSGIServer.max_children: Never
.ForkingWSGIServer.__call__: (host: Str, port: Int, app: Obj, processes: Int := Int, handler: Obj := Obj, passthrough_errors: Bool := Bool, ssl_context: Obj := Obj, fd: NoneType or Int := NoneType or Int) -> serving.ForkingWSGIServer
.ForkingWSGIServer.multiprocess: {True}

.make_server: (host: Str, port: Int, app: Obj, threaded: Bool := Bool, processes: Int := Int, request_handler: Obj := Obj, passthrough_errors: Bool := Bool, ssl_context: Obj := Obj, fd: NoneType or Int := NoneType or Int) -> serving.BaseWSGIServer
.is_running_from_reloader: () -> Bool
.run_simple: (hostname: Str, port: Int, application: Obj, use_reloader: Bool := Bool, use_debugger: Bool := Bool, use_evalex: Bool := Bool, extra_files: Obj := Obj, exclude_patterns: Obj := Obj, reloader_interval: Int := Int, reloader_type: Str := Str, threaded: Bool := Bool, processes: Int := Int, request_handler: Obj := Obj, static_files: NoneType or global::Dict!({Str: global::Tuple([Str, Str]) or Str}) := NoneType or global::Dict!({Str: global::Tuple([Str, Str]) or Str}), passthrough_errors: Bool := Bool, ssl_context: Obj := Obj) -> NoneType
