##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/utils.py 1736025949 24725
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.io = pyimport "<failure>"


.mimetypes = pyimport "<failure>"


.os = pyimport "<failure>"


.pkgutil = pyimport "<failure>"


.re = pyimport "<failure>"


.sys = pyimport "<failure>"


.t = pyimport "<failure>"


.unicodedata = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.datetime: Never
.___v_desugar_3 = pyimport "<failure>"

.time: Never
.___v_desugar_4 = pyimport "<failure>"

.quote: Never
.___v_desugar_5 = pyimport "<failure>"

.adler32: Never
.___v_desugar_6 = pyimport "__init__"
.__init__ = pyimport "__init__"
.escape: (s: Obj) -> Never
.___v_desugar_7 = pyimport "_internal"
._internal = pyimport "_internal"
._DictAccessorProperty: Never
.___v_desugar_8 = pyimport "_internal"

._missing: _internal.Type__Missing
.___v_desugar_9 = pyimport "_internal"

._TAccessorValue: Never
.___v_desugar_10 = pyimport "__init__"

.Headers: Never
.___v_desugar_11 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.NotFound: {werkzeug.exceptions.NotFound}
.___v_desugar_12 = pyimport "exceptions"

.RequestedRangeNotSatisfiable: {werkzeug.exceptions.RequestedRangeNotSatisfiable}
.___v_desugar_13 = pyimport "security"
.security = pyimport "security"
.safe_join: (directory: Str, *pathnames: Str) -> NoneType or Str
.___v_desugar_14 = pyimport "wsgi"
.wsgi = pyimport "wsgi"
.wrap_file: (environ: Obj, file: Obj, buffer_size: Int := Int) -> Never

._T: Never
._entity_re: Never
._filename_ascii_strip_re: Never
._windows_device_files: global::Set({"NUL", "CON", "AUX", "PRN"}, 6)
.Type_cached_property: ClassType
.Type_cached_property <: Never
.Type_cached_property.__name__: Never
.Type_cached_property.slot_name: Never
.Type_cached_property.__module__: Never
.Type_cached_property.__call__: (fget: Obj, name: NoneType or Str := NoneType or Str, doc: NoneType or Str := NoneType or Str) -> utils.Type_cached_property
.Type_cached_property.__set__: (self: utils.Type_cached_property, obj: Obj, value: Obj) -> NoneType
.Type_cached_property.__get__: (self: utils.Type_cached_property, obj: Obj, Type: Type := Type) -> Never
.Type_cached_property.__delete__: (self: utils.Type_cached_property, obj: Obj) -> NoneType

.Type_environ_property: ClassType
.Type_environ_property <: Never
.Type_environ_property.read_only: {True}
.Type_environ_property.lookup: (self: utils.Type_environ_property, obj: wrappers.request.Request) -> Never

.Type_header_property: ClassType
.Type_header_property <: Never
.Type_header_property.lookup: (self: utils.Type_header_property, obj: wrappers.request.Request or wrappers.response.Response) -> Never

._charset_mimetypes: global::Set({"application.ecmascript", "application.javascript", "application.sql", "application.xml", "application.xml-dtd", "application.xml-external-parsed-entity"}, 6)
.get_content_type: (mimetype: Str, charset: Str) -> Str
.secure_filename: (filename: Str) -> Str
.redirect: (location: Str, code: Int := Int, _ := {wrappers.response.Response}) -> wrappers.response.Response
.append_slash_redirect: (environ: Obj, code: Int := Int) -> wrappers.response.Response
.send_file: (path_or_file: NoneType or Str, environ: Obj, mimetype: NoneType or Str := NoneType or Str, as_attachment: Bool := Bool, download_name: NoneType or Str := NoneType or Str, conditional: Bool := Bool, etag: Bool or Str := Bool or Str, last_modified: Obj := Obj, max_age: NoneType or Int := NoneType or Int, use_x_sendfile: Bool := Bool, response_class: Obj := Obj, _root_path: NoneType or Str := NoneType or Str) -> wrappers.response.Response
.send_from_directory: (directory: Obj, path: Obj, environ: Obj, **kwargs := Obj) -> wrappers.response.Response
.import_string: (import_name: Str, silent: Bool := Bool) -> Never
.find_modules: (import_path: Str, include_packages: Bool := Bool, recursive: Bool := Bool) -> NoneType
.ImportStringError: ClassType
.ImportStringError <: global::ImportError
.ImportStringError.import_name: Str
.ImportStringError.exception: global::BaseException
.ImportStringError.__call__: (import_name: Str, exception: global::BaseException) -> utils.ImportStringError
.ImportStringError.__repr__: (self: utils.ImportStringError) -> Str

