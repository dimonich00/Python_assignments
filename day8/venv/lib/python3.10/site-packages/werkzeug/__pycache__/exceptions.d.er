##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/exceptions.py 1736025949 26455

.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.datetime: Never
.___v_desugar_3 = pyimport "__init__"
.__init__ = pyimport "__init__"
.escape: (s: Obj) -> Never
.___v_desugar_4 = pyimport "__init__"

.Markup: {markupsafe.Markup}
.___v_desugar_5 = pyimport "_internal"
._internal = pyimport "_internal"
._get_environ: (obj: Obj) -> Never

.HTTPException: ClassType
.HTTPException <: global::Exception
.HTTPException.response: NoneType or werkzeug.sansio.response.Response
.HTTPException.__call__: (self: werkzeug.exceptions.HTTPException, environ: Obj, start_response: Obj) -> Never
.HTTPException.code: NoneType or Int
.HTTPException.description: NoneType or Str
.HTTPException.name: (self: werkzeug.exceptions.HTTPException) -> Str
.HTTPException.get_description: Never
.HTTPException.get_body: Never
.HTTPException.get_headers: Never
.HTTPException.get_response: Never
.HTTPException.__call__: (self: werkzeug.exceptions.HTTPException, environ: Obj, start_response: Obj) -> Never
.HTTPException.__str__: (self: werkzeug.exceptions.HTTPException) -> Str
.HTTPException.__repr__: (self: werkzeug.exceptions.HTTPException) -> Str

.BadRequest: ClassType
werkzeug = pyimport "werkzeug"
.BadRequest <: werkzeug.exceptions.HTTPException
.BadRequest.code: {400}
.BadRequest.description: {"The browser (or proxy) sent a request that this server could not understand."}

.BadRequestKeyError: ClassType
.BadRequestKeyError <: werkzeug.exceptions.BadRequest
.BadRequestKeyError.__call__: (*args: Obj, arg: Obj := Obj, **kwargs := Obj) -> werkzeug.exceptions.BadRequestKeyError
.BadRequestKeyError._description: {"The browser (or proxy) sent a request that this server could not understand."}
.BadRequestKeyError.show_exception: {False}
.BadRequestKeyError.description: (self: werkzeug.exceptions.BadRequestKeyError) -> Str

.ClientDisconnected: ClassType
.ClientDisconnected <: werkzeug.exceptions.BadRequest

.SecurityError: ClassType
.SecurityError <: werkzeug.exceptions.BadRequest

.BadHost: ClassType
.BadHost <: werkzeug.exceptions.BadRequest

.Unauthorized: ClassType
.Unauthorized <: werkzeug.exceptions.HTTPException
.Unauthorized.www_authenticate: Never
.Unauthorized.__call__: (description: NoneType or Str := NoneType or Str, response: NoneType or werkzeug.sansio.response.Response := NoneType or werkzeug.sansio.response.Response, www_authenticate: Obj := Obj) -> werkzeug.exceptions.Unauthorized
.Unauthorized.code: {401}
.Unauthorized.description: {"The server could not verify that you are authorized to access the URL requested. You either supplied the wrong credentials (e.g. a bad password), or your browser doesn\'t understand how to supply the credentials required."}
.Unauthorized.get_headers: Never

.Forbidden: ClassType
.Forbidden <: werkzeug.exceptions.HTTPException
.Forbidden.code: {403}
.Forbidden.description: {"You don\'t have the permission to access the requested resource. It is either read-protected or not readable by the server."}

.NotFound: ClassType
.NotFound <: werkzeug.exceptions.HTTPException
.NotFound.code: {404}
.NotFound.description: {"The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again."}

.MethodNotAllowed: ClassType
.MethodNotAllowed <: werkzeug.exceptions.HTTPException
.MethodNotAllowed.valid_methods: Never
.MethodNotAllowed.__call__: (valid_methods: Obj := Obj, description: NoneType or Str := NoneType or Str, response: NoneType or werkzeug.sansio.response.Response := NoneType or werkzeug.sansio.response.Response) -> werkzeug.exceptions.MethodNotAllowed
.MethodNotAllowed.code: {405}
.MethodNotAllowed.description: {"The method is not allowed for the requested URL."}
.MethodNotAllowed.get_headers: Never

.NotAcceptable: ClassType
.NotAcceptable <: werkzeug.exceptions.HTTPException
.NotAcceptable.code: {406}
.NotAcceptable.description: {"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to the accept headers sent in the request."}

.RequestTimeout: ClassType
.RequestTimeout <: werkzeug.exceptions.HTTPException
.RequestTimeout.code: {408}
.RequestTimeout.description: {"The server closed the network connection because the browser didn\'t finish the request within the specified time."}

.Conflict: ClassType
.Conflict <: werkzeug.exceptions.HTTPException
.Conflict.code: {409}
.Conflict.description: {"A conflict happened while processing the request. The resource might have been modified while the request was being processed."}

.Gone: ClassType
.Gone <: werkzeug.exceptions.HTTPException
.Gone.code: {410}
.Gone.description: {"The requested URL is no longer available on this server and there is no forwarding address. If you followed a link from a foreign page, please contact the author of this page."}

.LengthRequired: ClassType
.LengthRequired <: werkzeug.exceptions.HTTPException
.LengthRequired.code: {411}
.LengthRequired.description: {"A request with this method requires a valid <code>Content-Length<.code> header."}

.PreconditionFailed: ClassType
.PreconditionFailed <: werkzeug.exceptions.HTTPException
.PreconditionFailed.code: {412}
.PreconditionFailed.description: {"The precondition on the request for the URL failed positive evaluation."}

.RequestEntityTooLarge: ClassType
.RequestEntityTooLarge <: werkzeug.exceptions.HTTPException
.RequestEntityTooLarge.code: {413}
.RequestEntityTooLarge.description: {"The data value transmitted exceeds the capacity limit."}

.RequestURITooLarge: ClassType
.RequestURITooLarge <: werkzeug.exceptions.HTTPException
.RequestURITooLarge.code: {414}
.RequestURITooLarge.description: {"The length of the requested URL exceeds the capacity limit for this server. The request cannot be processed."}

.UnsupportedMediaType: ClassType
.UnsupportedMediaType <: werkzeug.exceptions.HTTPException
.UnsupportedMediaType.code: {415}
.UnsupportedMediaType.description: {"The server does not support the media type transmitted in the request."}

.RequestedRangeNotSatisfiable: ClassType
.RequestedRangeNotSatisfiable <: werkzeug.exceptions.HTTPException
.RequestedRangeNotSatisfiable.units: Str
.RequestedRangeNotSatisfiable.length: NoneType or Int
.RequestedRangeNotSatisfiable.__call__: (length: NoneType or Int := NoneType or Int, units: Str := Str, description: NoneType or Str := NoneType or Str, response: NoneType or werkzeug.sansio.response.Response := NoneType or werkzeug.sansio.response.Response) -> werkzeug.exceptions.RequestedRangeNotSatisfiable
.RequestedRangeNotSatisfiable.code: {416}
.RequestedRangeNotSatisfiable.description: {"The server cannot provide the requested range."}
.RequestedRangeNotSatisfiable.get_headers: Never

.ExpectationFailed: ClassType
.ExpectationFailed <: werkzeug.exceptions.HTTPException
.ExpectationFailed.code: {417}
.ExpectationFailed.description: {"The server could not meet the requirements of the Expect header"}

.ImATeapot: ClassType
.ImATeapot <: werkzeug.exceptions.HTTPException
.ImATeapot.code: {418}
.ImATeapot.description: {"This server is a teapot, not a coffee machine"}

.MisdirectedRequest: ClassType
.MisdirectedRequest <: werkzeug.exceptions.HTTPException
.MisdirectedRequest.code: {421}
.MisdirectedRequest.description: {"The server is not able to produce a response."}

.UnprocessableEntity: ClassType
.UnprocessableEntity <: werkzeug.exceptions.HTTPException
.UnprocessableEntity.code: {422}
.UnprocessableEntity.description: {"The request was well-formed but was unable to be followed due to semantic errors."}

.Locked: ClassType
.Locked <: werkzeug.exceptions.HTTPException
.Locked.code: {423}
.Locked.description: {"The resource that is being accessed is locked."}

.FailedDependency: ClassType
.FailedDependency <: werkzeug.exceptions.HTTPException
.FailedDependency.code: {424}
.FailedDependency.description: {"The method could not be performed on the resource because the requested action depended on another action and that action failed."}

.PreconditionRequired: ClassType
.PreconditionRequired <: werkzeug.exceptions.HTTPException
.PreconditionRequired.code: {428}
.PreconditionRequired.description: {"This request is required to be conditional; try using \"If-Match\" or \"If-Unmodified-Since\"."}

.Type__RetryAfter: ClassType
.Type__RetryAfter <: werkzeug.exceptions.HTTPException
.Type__RetryAfter.retry_after: Never
.Type__RetryAfter.__call__: (description: NoneType or Str := NoneType or Str, response: NoneType or werkzeug.sansio.response.Response := NoneType or werkzeug.sansio.response.Response, retry_after: Obj := Obj) -> werkzeug.exceptions.Type__RetryAfter
.Type__RetryAfter.get_headers: Never

.TooManyRequests: ClassType
.TooManyRequests <: werkzeug.exceptions.Type__RetryAfter
.TooManyRequests.code: {429}
.TooManyRequests.description: {"This user has exceeded an allotted request count. Try again later."}

.RequestHeaderFieldsTooLarge: ClassType
.RequestHeaderFieldsTooLarge <: werkzeug.exceptions.HTTPException
.RequestHeaderFieldsTooLarge.code: {431}
.RequestHeaderFieldsTooLarge.description: {"One or more header fields exceeds the maximum size."}

.UnavailableForLegalReasons: ClassType
.UnavailableForLegalReasons <: werkzeug.exceptions.HTTPException
.UnavailableForLegalReasons.code: {451}
.UnavailableForLegalReasons.description: {"Unavailable for legal reasons."}

.InternalServerError: ClassType
.InternalServerError <: werkzeug.exceptions.HTTPException
.InternalServerError.original_exception: global::BaseException or NoneType
.InternalServerError.__call__: (description: NoneType or Str := {None} and NoneType or Str, response: NoneType or werkzeug.sansio.response.Response := {None} and NoneType or werkzeug.sansio.response.Response, original_exception: global::BaseException or NoneType := {None} and global::BaseException or NoneType) -> werkzeug.exceptions.InternalServerError
.InternalServerError.code: {500}
.InternalServerError.description: {"The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application."}

.NotImplemented: ClassType
.NotImplemented <: werkzeug.exceptions.HTTPException
.NotImplemented.code: {501}
.NotImplemented.description: {"The server does not support the action requested by the browser."}

.BadGateway: ClassType
.BadGateway <: werkzeug.exceptions.HTTPException
.BadGateway.code: {502}
.BadGateway.description: {"The proxy server received an invalid response from an upstream server."}

.ServiceUnavailable: ClassType
.ServiceUnavailable <: werkzeug.exceptions.Type__RetryAfter
.ServiceUnavailable.code: {503}
.ServiceUnavailable.description: {"The server is temporarily unable to service your request due to maintenance downtime or capacity problems. Please try again later."}

.GatewayTimeout: ClassType
.GatewayTimeout <: werkzeug.exceptions.HTTPException
.GatewayTimeout.code: {504}
.GatewayTimeout.description: {"The connection to an upstream server timed out."}

.HTTPVersionNotSupported: ClassType
.HTTPVersionNotSupported <: werkzeug.exceptions.HTTPException
.HTTPVersionNotSupported.code: {505}
.HTTPVersionNotSupported.description: {"The server does not support the HTTP protocol version used in the request."}

.default_exceptions: Never
._find_exceptions: () -> NoneType


.Aborter: ClassType
.Aborter.mapping: global::Dict!({Int: Never})
.Aborter.__call__: (self: Obj, code: Int or werkzeug.sansio.response.Response, *args: Obj, **kwargs := Obj) -> Never
.Aborter.__call__: (self: Obj, code: Int or werkzeug.sansio.response.Response, *args: Obj, **kwargs := Obj) -> Never

.abort: (status: Int or werkzeug.sansio.response.Response, *args: Obj, **kwargs := Obj) -> Never
._aborter: Never
