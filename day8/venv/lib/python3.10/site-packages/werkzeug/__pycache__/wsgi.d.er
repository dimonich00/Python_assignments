##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/wsgi.py 1736025949 20894
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.io = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.partial: Never
.___v_desugar_3 = pyimport "<failure>"

.update_wrapper: Never
.___v_desugar_4 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.ClientDisconnected: {werkzeug.exceptions.ClientDisconnected}
.___v_desugar_5 = pyimport "exceptions"

.RequestEntityTooLarge: {werkzeug.exceptions.RequestEntityTooLarge}
.___v_desugar_6 = pyimport "__init__"
.__init__ = pyimport "__init__"
._sansio_utils: Never
.___v_desugar_7 = pyimport "utils"
.utils = pyimport "utils"
.host_is_trusted: (hostname: NoneType or Str, trusted_list: global::Iterable(Structural({.partition = (self: Obj, Obj) -> global::Indexable(Obj, Str); .startswith = (self: Obj, Obj) -> Bool; .__getitem__ = (self: Obj, Obj) -> Never}))) -> Bool

.responder: (f: () -> () -> Never) -> Never
.get_current_url: (environ: Obj, root_only: Bool := Bool, strip_querystring: Bool := Bool, host_only: Bool := Bool, trusted_hosts: Obj := Obj) -> Str
._get_server: (environ: Obj) -> global::Tuple([Str, NoneType or Int]) or NoneType
.get_host: (environ: Obj, trusted_hosts: Obj := Obj) -> Str
.get_content_length: (environ: Obj) -> NoneType or Int
.get_input_stream: (environ: Obj, safe_fallback: Bool := Bool, max_content_length: NoneType or Int := NoneType or Int) -> Never
.get_path_info: (environ: Obj) -> Str
.ClosingIterator: ClassType
.ClosingIterator._callbacks: Never
.ClosingIterator._next: Never
.ClosingIterator.__call__: (iterable: Obj, callbacks: Obj := Obj) -> wsgi.ClosingIterator
.ClosingIterator.__iter__: (self: wsgi.ClosingIterator) -> wsgi.ClosingIterator
.ClosingIterator.__next__: (self: wsgi.ClosingIterator) -> global::Bytes
.ClosingIterator.close: (self: wsgi.ClosingIterator) -> NoneType

.wrap_file: (environ: Obj, file: Obj, buffer_size: Int := Int) -> Never
.FileWrapper: ClassType
.FileWrapper.file: Never
.FileWrapper.buffer_size: Int
.FileWrapper.__call__: (file: Obj, buffer_size: Int := Int) -> wsgi.FileWrapper
.FileWrapper.close: (self: wsgi.FileWrapper) -> NoneType
.FileWrapper.seekable: (self: wsgi.FileWrapper) -> Bool
.FileWrapper.seek: (self: wsgi.FileWrapper, *args: Obj) -> NoneType
.FileWrapper.tell: (self: wsgi.FileWrapper) -> NoneType or Int
.FileWrapper.__iter__: (self: wsgi.FileWrapper) -> wsgi.FileWrapper
.FileWrapper.__next__: (self: wsgi.FileWrapper) -> global::Bytes

.Type__RangeWrapper: ClassType
.Type__RangeWrapper.iterable: Never
.Type__RangeWrapper.start_byte: Int
.Type__RangeWrapper.seekable: Never
.Type__RangeWrapper.byte_range: NoneType or Int
.Type__RangeWrapper.end_reached: Never
.Type__RangeWrapper.end_byte: Never
.Type__RangeWrapper.read_length: Never
.Type__RangeWrapper.__call__: (iterable: Obj, start_byte: Int := Int, byte_range: NoneType or Int := NoneType or Int) -> wsgi.Type__RangeWrapper
.Type__RangeWrapper.__iter__: (self: wsgi.Type__RangeWrapper) -> Never
.Type__RangeWrapper._next_chunk: (self: wsgi.Type__RangeWrapper) -> global::Bytes
.Type__RangeWrapper._first_iteration: (self: wsgi.Type__RangeWrapper) -> global::Tuple([NoneType or global::Bytes, Int])
.Type__RangeWrapper._next: (self: wsgi.Type__RangeWrapper) -> global::Bytes
.Type__RangeWrapper.__next__: (self: wsgi.Type__RangeWrapper) -> global::Bytes
.Type__RangeWrapper.close: (self: wsgi.Type__RangeWrapper) -> NoneType

.LimitedStream: ClassType
.LimitedStream <: Never
.LimitedStream._limit_is_max: Never
.LimitedStream._pos: Never
.LimitedStream.limit: Int
.LimitedStream._stream: Never
.LimitedStream.__call__: (stream: Obj, limit: Int, is_max: Bool := Bool and Bool) -> wsgi.LimitedStream
.LimitedStream.is_exhausted: (self: wsgi.LimitedStream) -> Bool
.LimitedStream.on_exhausted: (self: wsgi.LimitedStream) -> NoneType
.LimitedStream.on_disconnect: (self: wsgi.LimitedStream, error: NoneType or global::Exception := NoneType or global::Exception) -> NoneType
.LimitedStream.exhaust: (self: wsgi.LimitedStream) -> global::Bytes
.LimitedStream.readinto: (self: wsgi.LimitedStream, b: global::ByteArray!) -> NoneType or Int
.LimitedStream.readall: (self: wsgi.LimitedStream) -> global::Bytes
.LimitedStream.tell: (self: wsgi.LimitedStream) -> Int
.LimitedStream.readable: (self: wsgi.LimitedStream) -> Bool

