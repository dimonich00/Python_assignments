##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/debug/tbtools.py 1736025949 13560
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.itertools = pyimport "<failure>"


.linecache = pyimport "<failure>"


.os = pyimport "<failure>"


.re = pyimport "<failure>"


.sys = pyimport "<failure>"


.sysconfig = pyimport "<failure>"


.traceback = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "__init__"
.__init__ = pyimport "__init__"
.escape: (s: Obj) -> Never
.___v_desugar_3 = pyimport "<failure>"

.cached_property: Never
.___v_desugar_4 = pyimport "console"
.console = pyimport "console"
.Console: Never
.HEADER: {"<!doctype html>\n<html lang=en>\n  <head>\n    <title>Type_(title)s .. Werkzeug Debugger<.title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"><.script>\n    <script>\n      var CONSOLE_MODE = Type_(console)s,\n          EVALEX = Type_(evalex)s,\n          EVALEX_TRUSTED = Type_(evalex_trusted)s,\n          SECRET = \"Type_(secret)s\";\n    <.script>\n  <.head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n"}
.FOOTER: {"      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON\'T PANIC<.strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      <.div>\n    <.div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked<.h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        <.form>\n      <.div>\n    <.div>\n  <.body>\n<.html>\n"}
.PAGE_HTML: {"<!doctype html>\n<html lang=en>\n  <head>\n    <title>Type_(title)s .. Werkzeug Debugger<.title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"><.script>\n    <script>\n      var CONSOLE_MODE = Type_(console)s,\n          EVALEX = Type_(evalex)s,\n          EVALEX_TRUSTED = Type_(evalex_trusted)s,\n          SECRET = \"Type_(secret)s\";\n    <.script>\n  <.head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>Type_(exception_type)s<.h1>\n<div class=\"detail\">\n  <p class=\"errormsg\">Type_(exception)s<.p>\n<.div>\n<h2 class=\"traceback\">Traceback <em>(most recent call last)<.em><.h2>\nType_(summary)s\n<div class=\"plain\">\n    <p>\n      This is the Copy.Paste friendly version of the traceback.\n    <.p>\n    <textarea cols=\"50\" rows=\"10\" name=\"code\" readonly>Type_(plaintext)s<.textarea>\n<.div>\n<div class=\"explanation\">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class=\"nojavascript\">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.<.span>\n<.div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON\'T PANIC<.strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      <.div>\n    <.div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked<.h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        <.form>\n      <.div>\n    <.div>\n  <.body>\n<.html>\n\n<!--\n\nType_(plaintext_cs)s\n\n-->\n"}
.CONSOLE_HTML: {"<!doctype html>\n<html lang=en>\n  <head>\n    <title>Type_(title)s .. Werkzeug Debugger<.title>\n    <link rel=\"stylesheet\" href=\"?__debugger__=yes&amp;cmd=resource&amp;f=style.css\">\n    <link rel=\"shortcut icon\"\n        href=\"?__debugger__=yes&amp;cmd=resource&amp;f=console.png\">\n    <script src=\"?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js\"><.script>\n    <script>\n      var CONSOLE_MODE = Type_(console)s,\n          EVALEX = Type_(evalex)s,\n          EVALEX_TRUSTED = Type_(evalex_trusted)s,\n          SECRET = \"Type_(secret)s\";\n    <.script>\n  <.head>\n  <body style=\"background-color: #fff\">\n    <div class=\"debugger\">\n<h1>Interactive Console<.h1>\n<div class=\"explanation\">\nIn this console you can execute Python expressions in the context of the\napplication.  The initial namespace was created by the debugger automatically.\n<.div>\n<div class=\"console\"><div class=\"inner\">The Console requires JavaScript.<.div><.div>\n      <div class=\"footer\">\n        Brought to you by <strong class=\"arthur\">DON\'T PANIC<.strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      <.div>\n    <.div>\n\n    <div class=\"pin-prompt\">\n      <div class=\"inner\">\n        <h3>Console Locked<.h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value=\"Confirm Pin\">\n        <.form>\n      <.div>\n    <.div>\n  <.body>\n<.html>\n"}
.SUMMARY_HTML: {"<div class=\"Type_(classes)s\">\n  Type_(title)s\n  <ul>Type_(frames)s<.ul>\n  Type_(description)s\n<.div>\n"}
.FRAME_HTML: {"<div class=\"frame\" id=\"frame-Type_(id)d\">\n  <h4>File <cite class=\"filename\">\"Type_(filename)s\"<.cite>,\n      line <em class=\"line\">Type_(lineno)s<.em>,\n      in <code class=\"function\">Type_(function_name)s<.code><.h4>\n  <div class=\"source Type_(library)s\">Type_(lines)s<.div>\n<.div>\n"}
._process_traceback: (exc: global::BaseException, te: Obj := Obj, skip: Int := Int and Int, hide: Bool := Bool) -> Never
.DebugTraceback: ClassType
.DebugTraceback._te: Never
.DebugTraceback.__call__: (exc: global::BaseException, te: Obj := Obj, skip: Int := Int, hide: Bool := Bool) -> debug.tbtools.DebugTraceback
.DebugTraceback.__slots__: global::Tuple([{"_te"}, {"_cache_all_tracebacks"}, {"_cache_all_frames"}])
.DebugTraceback.__str__: (self: debug.tbtools.DebugTraceback) -> Str
.DebugTraceback.all_tracebacks: Never
.DebugTraceback.all_frames: Never
.DebugTraceback.render_traceback_text: (self: debug.tbtools.DebugTraceback) -> Str
.DebugTraceback.render_traceback_html: (self: debug.tbtools.DebugTraceback, include_title: Bool := Bool) -> Str
.DebugTraceback.render_debugger_html: (self: debug.tbtools.DebugTraceback, evalex: Bool, secret: Str, evalex_trusted: Bool) -> Str

.DebugFrameSummary: ClassType
.DebugFrameSummary <: Never
.DebugFrameSummary.global_ns: Never
.DebugFrameSummary.local_ns: Never
.DebugFrameSummary.__call__: Never
.DebugFrameSummary.__slots__: global::Tuple([{"local_ns"}, {"global_ns"}, {"_cache_info"}, {"_cache_is_library"}, {"_cache_console"}])
.DebugFrameSummary.info: (self: debug.tbtools.DebugFrameSummary) -> NoneType or Str
.DebugFrameSummary.is_library: (self: debug.tbtools.DebugFrameSummary) -> Bool
.DebugFrameSummary.console: (self: debug.tbtools.DebugFrameSummary) -> Never
.DebugFrameSummary.eval: (self: debug.tbtools.DebugFrameSummary, code: Str) -> Never
.DebugFrameSummary.render_html: (self: debug.tbtools.DebugFrameSummary, mark_library: Bool) -> Str

.render_console_html: (secret: Str, evalex_trusted: Bool) -> Str
