##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/wrappers/response.py 1736025949 32459
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.json = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.HTTPStatus: Never
.___v_desugar_3 = pyimport "<failure>"

.urljoin: Never
.___v_desugar_4 = pyimport "<failure>"

._get_environ: Never
.___v_desugar_5 = pyimport "<failure>"

.Headers: Never
.___v_desugar_6 = pyimport "<failure>"

.generate_etag: Never
.___v_desugar_7 = pyimport "<failure>"

.http_date: Never
.___v_desugar_8 = pyimport "<failure>"

.is_resource_modified: Never
.___v_desugar_9 = pyimport "<failure>"

.parse_etags: Never
.___v_desugar_10 = pyimport "<failure>"

.parse_range_header: Never
.___v_desugar_11 = pyimport "<failure>"

.remove_entity_headers: Never
.___v_desugar_12 = pyimport "<failure>"

._SansIOResponse: Never
.___v_desugar_13 = pyimport "<failure>"

.iri_to_uri: Never
.___v_desugar_14 = pyimport "<failure>"

.cached_property: Never
.___v_desugar_15 = pyimport "<failure>"

._RangeWrapper: Never
.___v_desugar_16 = pyimport "<failure>"

.ClosingIterator: Never
.___v_desugar_17 = pyimport "<failure>"

.get_current_url: Never

._iter_encoded: (iterable: global::Iterable(Never)) -> NoneType
.Response: ClassType
.Response <: Never
.Response._on_close: global::List!(Never, _: Nat)
.Response.response: Never
.Response.direct_passthrough: Bool
.Response.__call__: (self: wrappers.response.Response, environ: Obj, start_response: Obj) -> Never
.Response.implicit_sequence_conversion: {True}
.Response.autocorrect_location_header: {False}
.Response.automatically_set_content_length: {True}
.Response.call_on_close: |T: Type|(self: wrappers.response.Response, func: T) -> T
.Response.__repr__: (self: wrappers.response.Response) -> Str
.Response.force_type: (cls: ClassType, response: wrappers.response.Response, environ: Obj := Obj) -> wrappers.response.Response
.Response.from_app: (cls: () -> wrappers.response.Response, app: Obj, environ: Obj, buffered: Bool := {False} and Bool) -> wrappers.response.Response
.Response.get_data: (self: wrappers.response.Response, as_text: Obj := Obj) -> global::Bytes
.Response.get_data: (self: wrappers.response.Response, as_text: Obj) -> Str
.Response.get_data: (self: wrappers.response.Response, as_text: Bool := Bool) -> global::Bytes or Str
.Response.set_data: (self: wrappers.response.Response, value: global::Bytes or Str) -> NoneType
.Response.data: Never
.Response.calculate_content_length: (self: wrappers.response.Response) -> NoneType or Int
.Response._ensure_sequence: (self: wrappers.response.Response, mutable: Bool := Bool and Bool) -> NoneType
.Response.make_sequence: (self: wrappers.response.Response) -> NoneType
.Response.iter_encoded: (self: wrappers.response.Response) -> global::Iterable(Never)
.Response.is_streamed: (self: wrappers.response.Response) -> Bool
.Response.is_sequence: (self: wrappers.response.Response) -> Bool
.Response.close: (self: wrappers.response.Response) -> NoneType
.Response.__enter__: (self: wrappers.response.Response) -> wrappers.response.Response
.Response.__exit__: (self: wrappers.response.Response, exc_type: Obj, exc_value: Obj, tb: Obj) -> NoneType
.Response.freeze: (self: wrappers.response.Response) -> NoneType
.Response.get_wsgi_headers: (self: wrappers.response.Response, environ: Obj) -> Never
.Response.get_app_iter: (self: wrappers.response.Response, environ: Obj) -> Never
.Response.get_wsgi_response: (self: wrappers.response.Response, environ: Obj) -> global::Tuple([Never, Str, global::List!(global::Tuple([Str, Str]), _: Nat)])
.Response.__call__: (self: wrappers.response.Response, environ: Obj, start_response: Obj) -> Never
.Response.json_module: (self: wrappers.response.Response) -> Never
.Response.json: (self: wrappers.response.Response) -> Never
.Response.get_json: |Type_6335 :> {Ellipsis}|(self: wrappers.response.Response, force: Bool := Bool and Bool, silent: Type_6335 := Type_6335 and Type_6335) -> Never
.Response.get_json: (self: wrappers.response.Response, force: Bool := Bool, silent: Bool := Bool) -> Never
.Response.get_json: (self: wrappers.response.Response, force: Bool := Bool, silent: Bool := Bool) -> Never
.Response.stream: (self: wrappers.response.Response) -> Never
.Response._wrap_range_response: (self: wrappers.response.Response, start: Int, length: Int) -> NoneType
.Response._is_range_request_processable: (self: wrappers.response.Response, environ: Obj) -> Bool
.Response._process_range_request: (self: wrappers.response.Response, environ: Obj, complete_length: NoneType or Int, accept_ranges: Bool or Str) -> Bool
.Response.make_conditional: (self: wrappers.response.Response, request_or_environ: Obj, accept_ranges: Bool or Str := Bool or Str, complete_length: NoneType or Int := NoneType or Int) -> wrappers.response.Response
.Response.add_etag: (self: wrappers.response.Response, overwrite: Bool := Bool and Bool, weak: Bool := Bool and Bool) -> NoneType

.ResponseStream: ClassType
wrappers = pyimport "wrappers"
.ResponseStream.response: wrappers.response.Response
.ResponseStream.closed: Never
.ResponseStream.__call__: (response: wrappers.response.Response) -> wrappers.response.ResponseStream
.ResponseStream.mode: {"wb+"}
.ResponseStream.write: (self: wrappers.response.ResponseStream, value: global::Bytes) -> Int
.ResponseStream.writelines: (self: wrappers.response.ResponseStream, seq: global::Iterable(global::Bytes)) -> NoneType
.ResponseStream.close: (self: wrappers.response.ResponseStream) -> NoneType
.ResponseStream.flush: (self: wrappers.response.ResponseStream) -> NoneType
.ResponseStream.isatty: (self: wrappers.response.ResponseStream) -> Bool
.ResponseStream.tell: (self: wrappers.response.ResponseStream) -> Int
.ResponseStream.encoding: (self: wrappers.response.ResponseStream) -> Str

