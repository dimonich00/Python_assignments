##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/datastructures/mixins.py 1736025949 9027
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.cabc = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.update_wrapper: Never
.___v_desugar_3 = pyimport "<failure>"

.repeat: Never
.___v_desugar_4 = pyimport "<failure>"

._missing: Never

.K: Never
.V: Never
.T: Never
.F: Never
._immutable_error: (self: Obj) -> Never
.ImmutableListMixin: ClassType
.ImmutableListMixin.__call__: () -> mixins.ImmutableListMixin
.ImmutableListMixin._hash_cache: NoneType or Int
.ImmutableListMixin.__hash__: (self: mixins.ImmutableListMixin) -> Int
.ImmutableListMixin.__reduce_ex__: (self: mixins.ImmutableListMixin, protocol: Obj) -> Never
.ImmutableListMixin.__delitem__: (self: mixins.ImmutableListMixin, key: Obj) -> Never
.ImmutableListMixin.__iadd__: (self: mixins.ImmutableListMixin, other: Obj) -> Never
.ImmutableListMixin.__imul__: (self: mixins.ImmutableListMixin, other: Obj) -> Never
.ImmutableListMixin.__setitem__: (self: mixins.ImmutableListMixin, key: Obj, value: Obj) -> Never
.ImmutableListMixin.append: (self: mixins.ImmutableListMixin, item: Obj) -> Never
.ImmutableListMixin.remove: (self: mixins.ImmutableListMixin, item: Obj) -> Never
.ImmutableListMixin.extend: (self: mixins.ImmutableListMixin, iterable: Obj) -> Never
.ImmutableListMixin.insert: (self: mixins.ImmutableListMixin, pos: Obj, value: Obj) -> Never
.ImmutableListMixin.pop: (self: mixins.ImmutableListMixin, index: Obj := Obj) -> Never
.ImmutableListMixin.reverse: (self: Obj) -> Never
.ImmutableListMixin.sort: (self: mixins.ImmutableListMixin, key: Obj := Obj, reverse: Obj := Obj) -> Never

.ImmutableDictMixin: ClassType
.ImmutableDictMixin <: Never
.ImmutableDictMixin._hash_cache: NoneType or Int
.ImmutableDictMixin.fromkeys: (cls: Obj, keys: Obj, value: NoneType) -> {Ellipsis}
.ImmutableDictMixin.fromkeys: (cls: Obj, keys: Obj, value: Obj) -> {Ellipsis}
.ImmutableDictMixin.fromkeys: (cls: Obj, keys: global::Iterable(Never), value: Obj := Obj) -> Never
.ImmutableDictMixin.__reduce_ex__: (self: mixins.ImmutableDictMixin, protocol: Obj) -> Never
.ImmutableDictMixin._iter_hashitems: (self: Never) -> global::DictItems(global::Tuple([Obj, Never]))
.ImmutableDictMixin.__hash__: (self: mixins.ImmutableDictMixin) -> Int
.ImmutableDictMixin.setdefault: (self: mixins.ImmutableDictMixin, key: Obj, default: Obj := Obj) -> Never
.ImmutableDictMixin.update: (self: mixins.ImmutableDictMixin, arg: Obj, **kwargs := Obj) -> Never
.ImmutableDictMixin.__ior__: (self: mixins.ImmutableDictMixin, other: Obj) -> Never
.ImmutableDictMixin.pop: (self: mixins.ImmutableDictMixin, key: Obj, default: Obj := Obj) -> Never
.ImmutableDictMixin.popitem: (self: mixins.ImmutableDictMixin) -> Never
.ImmutableDictMixin.__setitem__: (self: mixins.ImmutableDictMixin, key: Obj, value: Obj) -> Never
.ImmutableDictMixin.__delitem__: (self: mixins.ImmutableDictMixin, key: Obj) -> Never
.ImmutableDictMixin.clear: (self: mixins.ImmutableDictMixin) -> Never

.ImmutableMultiDictMixin: ClassType
.ImmutableMultiDictMixin <: Never
.ImmutableMultiDictMixin.__reduce_ex__: (self: mixins.ImmutableMultiDictMixin, protocol: Obj) -> Never
.ImmutableMultiDictMixin._iter_hashitems: (self: mixins.ImmutableMultiDictMixin) -> global::DictItems(global::Tuple([Obj, Never]))
.ImmutableMultiDictMixin.add: (self: mixins.ImmutableMultiDictMixin, key: Obj, value: Obj) -> Never
.ImmutableMultiDictMixin.popitemlist: (self: mixins.ImmutableMultiDictMixin) -> Never
.ImmutableMultiDictMixin.poplist: (self: mixins.ImmutableMultiDictMixin, key: Obj) -> Never
.ImmutableMultiDictMixin.setlist: (self: mixins.ImmutableMultiDictMixin, key: Obj, new_list: Obj) -> Never
.ImmutableMultiDictMixin.setlistdefault: (self: mixins.ImmutableMultiDictMixin, key: Obj, default_list: Obj := Obj) -> Never

.ImmutableHeadersMixin: ClassType
.ImmutableHeadersMixin.__call__: () -> mixins.ImmutableHeadersMixin
.ImmutableHeadersMixin.__delitem__: (self: mixins.ImmutableHeadersMixin, key: Obj, **kwargs := Obj) -> Never
.ImmutableHeadersMixin.__setitem__: (self: mixins.ImmutableHeadersMixin, key: Obj, value: Obj) -> Never
.ImmutableHeadersMixin.GenericSet: (self: mixins.ImmutableHeadersMixin, key: Obj, value: Obj, **kwargs := Obj) -> Never
.ImmutableHeadersMixin.setlist: (self: mixins.ImmutableHeadersMixin, key: Obj, values: Obj) -> Never
.ImmutableHeadersMixin.add: (self: mixins.ImmutableHeadersMixin, key: Obj, value: Obj, **kwargs := Obj) -> Never
.ImmutableHeadersMixin.add_header: (self: mixins.ImmutableHeadersMixin, key: Obj, value: Obj, **kwargs := Obj) -> Never
.ImmutableHeadersMixin.remove: (self: mixins.ImmutableHeadersMixin, key: Obj) -> Never
.ImmutableHeadersMixin.extend: (self: mixins.ImmutableHeadersMixin, arg: Obj, **kwargs := Obj) -> Never
.ImmutableHeadersMixin.update: (self: mixins.ImmutableHeadersMixin, arg: Obj, **kwargs := Obj) -> Never
.ImmutableHeadersMixin.__ior__: (self: mixins.ImmutableHeadersMixin, other: Obj) -> Never
.ImmutableHeadersMixin.insert: (self: mixins.ImmutableHeadersMixin, pos: Obj, value: Obj) -> Never
.ImmutableHeadersMixin.pop: (self: mixins.ImmutableHeadersMixin, key: Obj := Obj, default: Obj := Obj) -> Never
.ImmutableHeadersMixin.popitem: (self: mixins.ImmutableHeadersMixin) -> Never
.ImmutableHeadersMixin.setdefault: (self: mixins.ImmutableHeadersMixin, key: Obj, default: Obj) -> Never
.ImmutableHeadersMixin.setlistdefault: (self: mixins.ImmutableHeadersMixin, key: Obj, default: Obj) -> Never

._always_update: (f: Obj) -> Never
.UpdateDictMixin: ClassType
.UpdateDictMixin <: global::Dict!({Never: Never})
.UpdateDictMixin.on_update: NoneType
.UpdateDictMixin.setdefault: (self: Obj, key: Obj, default: Obj := Obj) -> Never
.UpdateDictMixin.pop: (self: Obj, key: Obj) -> Never
.UpdateDictMixin.pop: (self: Obj, key: Obj, default: Obj) -> Never
.UpdateDictMixin.pop: (self: Obj, key: Obj, default: Obj) -> Never
.UpdateDictMixin.pop: (self: Obj, key: Obj, default: Obj := Obj) -> Never
.UpdateDictMixin.__setitem__: (self: mixins.UpdateDictMixin, key: Obj, value: Obj) -> NoneType
.UpdateDictMixin.__delitem__: (self: mixins.UpdateDictMixin, key: Obj) -> NoneType
.UpdateDictMixin.clear: (self: mixins.UpdateDictMixin) -> NoneType
.UpdateDictMixin.popitem: (self: mixins.UpdateDictMixin) -> global::Tuple([Never, Never])
.UpdateDictMixin.update: (self: mixins.UpdateDictMixin, arg: Obj := Obj, **kwargs := Obj) -> NoneType
.UpdateDictMixin.__ior__: (self: mixins.UpdateDictMixin, other: Obj) -> Never

