##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/datastructures/structures.py 1736025949 41359
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.cabc = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.deepcopy: Never
.___v_desugar_3 = pyimport "__init__"
.__init__ = pyimport "__init__"
.exceptions: Never
.___v_desugar_4 = pyimport "<failure>"

._missing: Never
.___v_desugar_5 = pyimport "mixins"
.mixins = pyimport "mixins"
.ImmutableDictMixin: {mixins.ImmutableDictMixin}
.___v_desugar_6 = pyimport "mixins"

.ImmutableListMixin: {mixins.ImmutableListMixin}
.___v_desugar_7 = pyimport "mixins"

.ImmutableMultiDictMixin: {mixins.ImmutableMultiDictMixin}
.___v_desugar_8 = pyimport "mixins"

.UpdateDictMixin: {mixins.UpdateDictMixin}

.K: Never
.V: Never
.T: Never
.iter_multi_items: (mapping: global::GenericDict) -> NoneType
.ImmutableList: ClassType
.ImmutableList <: mixins.ImmutableListMixin
.ImmutableList.__repr__: (self: structures.ImmutableList) -> Str

.TypeConversionDict: ClassType
.TypeConversionDict <: global::Dict!({Never: Never})
.TypeConversionDict.get: (self: structures.TypeConversionDict, key: Obj) -> Never
.TypeConversionDict.get: (self: structures.TypeConversionDict, key: Obj, default: Obj) -> Never
.TypeConversionDict.get: (self: structures.TypeConversionDict, key: Obj, default: Obj) -> Never
.TypeConversionDict.get: (self: structures.TypeConversionDict, key: Str, Type: Obj) -> Never
.TypeConversionDict.get: (self: structures.TypeConversionDict, key: Str, default: Obj, Type: Obj) -> Never
.TypeConversionDict.get: (self: structures.TypeConversionDict, key: Obj, default: Obj := Obj, Type: Obj := Obj) -> Never

.ImmutableTypeConversionDict: ClassType
.ImmutableTypeConversionDict <: Never
.ImmutableTypeConversionDict.copy: (self: structures.ImmutableTypeConversionDict) -> Never
.ImmutableTypeConversionDict.__copy__: (self: structures.ImmutableTypeConversionDict) -> Never

.MultiDict: ClassType
.MultiDict <: Never
.MultiDict.__call__: (mapping: Obj := Obj) -> structures.MultiDict
.MultiDict.__getstate__: (self: structures.MultiDict) -> Never
.MultiDict.__setstate__: (self: structures.MultiDict, value: Obj) -> NoneType
.MultiDict.__iter__: (self: structures.MultiDict) -> Never
.MultiDict.__getitem__: (self: structures.MultiDict, key: Obj) -> Never
.MultiDict.__setitem__: (self: structures.MultiDict, key: Obj, value: Obj) -> NoneType
.MultiDict.add: (self: structures.MultiDict, key: Obj, value: Obj) -> NoneType
.MultiDict.getlist: Never
.MultiDict.getlist: Never
.MultiDict.getlist: Never
.MultiDict.setlist: (self: structures.MultiDict, key: Obj, new_list: global::Iterable(Never)) -> NoneType
.MultiDict.setdefault: (self: structures.MultiDict, key: Obj) -> NoneType
.MultiDict.setdefault: (self: structures.MultiDict, key: Obj, default: Obj) -> Never
.MultiDict.setdefault: (self: structures.MultiDict, key: Obj, default: Obj := Obj) -> Never
.MultiDict.setlistdefault: Never
.MultiDict.items: (self: structures.MultiDict, multi: Bool := Bool) -> NoneType
.MultiDict.lists: (self: structures.MultiDict) -> global::Iterable(global::Tuple([Never, Never]))
.MultiDict.values: (self: structures.MultiDict) -> NoneType
.MultiDict.listvalues: (self: structures.MultiDict) -> Never
.MultiDict.copy: (self: structures.MultiDict) -> Never
.MultiDict.deepcopy: (self: structures.MultiDict, memo: Obj := Obj) -> Never
.MultiDict.to_dict: Never
.MultiDict.to_dict: Never
.MultiDict.to_dict: Never
.MultiDict.update: (self: structures.MultiDict, mapping: global::GenericDict) -> NoneType
.MultiDict.__or__: (self: structures.MultiDict, other: Obj) -> Never
.MultiDict.__ior__: (self: structures.MultiDict, other: global::GenericDict) -> Never
.MultiDict.pop: (self: structures.MultiDict, key: Obj) -> Never
.MultiDict.pop: (self: structures.MultiDict, key: Obj, default: Obj) -> Never
.MultiDict.pop: (self: structures.MultiDict, key: Obj, default: Obj) -> Never
.MultiDict.pop: (self: structures.MultiDict, key: Obj, default: Obj := Obj) -> Never
.MultiDict.popitem: (self: structures.MultiDict) -> global::Tuple([Never, Never])
.MultiDict.poplist: Never
.MultiDict.popitemlist: Never
.MultiDict.__copy__: (self: structures.MultiDict) -> Never
.MultiDict.__deepcopy__: (self: structures.MultiDict, memo: Obj) -> Never
.MultiDict.__repr__: (self: structures.MultiDict) -> Str

.Type__omd_bucket: ClassType
.Type__omd_bucket <: Never
.Type__omd_bucket.key: Never
.Type__omd_bucket.value: Never
.Type__omd_bucket.next: Never
.Type__omd_bucket.prev: Never
.Type__omd_bucket.__call__: (omd: Obj, key: Obj, value: Obj) -> structures.Type__omd_bucket
.Type__omd_bucket.__slots__: global::Tuple([{"prev"}, {"key"}, {"value"}, {"next"}])
.Type__omd_bucket.unlink: |Type_7005 <: Structural({._last_bucket = ?8802 and ?8806; ._first_bucket = ?8791 and ?8792}), Type_8802: Type, Type_8806: Type, Type_8791: Type, Type_8792: Type|(self: structures.Type__omd_bucket, omd: Type_7005) -> NoneType

._OrderedMultiDict: ClassType

.CombinedMultiDict: ClassType
.CombinedMultiDict <: Never
.CombinedMultiDict.dicts: Never
.CombinedMultiDict.__call__: (dicts: Obj := Obj) -> structures.CombinedMultiDict
.CombinedMultiDict.__reduce_ex__: (self: structures.CombinedMultiDict, protocol: Obj) -> Never
.CombinedMultiDict.fromkeys: (cls: Obj, keys: Obj, value: Obj := Obj) -> Never
.CombinedMultiDict.__getitem__: (self: structures.CombinedMultiDict, key: Obj) -> Never
.CombinedMultiDict.get: (self: structures.CombinedMultiDict, key: Obj) -> Never
.CombinedMultiDict.get: (self: structures.CombinedMultiDict, key: Obj, default: Obj) -> Never
.CombinedMultiDict.get: (self: structures.CombinedMultiDict, key: Obj, default: Obj) -> Never
.CombinedMultiDict.get: (self: structures.CombinedMultiDict, key: Str, Type: Obj) -> Never
.CombinedMultiDict.get: (self: structures.CombinedMultiDict, key: Str, default: Obj, Type: Obj) -> Never
.CombinedMultiDict.get: (self: structures.CombinedMultiDict, key: Obj, default: Obj := Obj, Type: Obj := Obj) -> Never
.CombinedMultiDict.getlist: Never
.CombinedMultiDict.getlist: Never
.CombinedMultiDict.getlist: Never
.CombinedMultiDict._keys_impl: (self: structures.CombinedMultiDict) -> global::Set!(Never, _: Nat)
.CombinedMultiDict.keys: (self: structures.CombinedMultiDict) -> global::Set!(Never, _: Nat)
.CombinedMultiDict.__iter__: (self: structures.CombinedMultiDict) -> global::SetIterator(Never)
.CombinedMultiDict.items: (self: structures.CombinedMultiDict) -> {Ellipsis}
.CombinedMultiDict.items: (self: structures.CombinedMultiDict, multi: Obj) -> {Ellipsis}
.CombinedMultiDict.items: (self: structures.CombinedMultiDict, multi: Bool := Bool) -> NoneType
.CombinedMultiDict.values: (self: structures.CombinedMultiDict) -> NoneType
.CombinedMultiDict.lists: (self: structures.CombinedMultiDict) -> global::DictItems(Never)
.CombinedMultiDict.listvalues: (self: structures.CombinedMultiDict) -> Never
.CombinedMultiDict.copy: (self: structures.CombinedMultiDict) -> structures.MultiDict
.CombinedMultiDict.__len__: (self: structures.CombinedMultiDict) -> Int
.CombinedMultiDict.__contains__: (self: structures.CombinedMultiDict, key: Obj) -> Bool
.CombinedMultiDict.__repr__: (self: structures.CombinedMultiDict) -> Str

.ImmutableDict: ClassType
.ImmutableDict <: Never
.ImmutableDict.__repr__: (self: structures.ImmutableDict) -> Str
.ImmutableDict.copy: Never
.ImmutableDict.__copy__: (self: structures.ImmutableDict) -> Never

.ImmutableMultiDict: ClassType
.ImmutableMultiDict <: Never
.ImmutableMultiDict.copy: (self: structures.ImmutableMultiDict) -> structures.MultiDict
.ImmutableMultiDict.__copy__: (self: structures.ImmutableMultiDict) -> Never

.Type__ImmutableOrderedMultiDict: ClassType
.Type__ImmutableOrderedMultiDict <: Never
.Type__ImmutableOrderedMultiDict.__call__: (mapping: Obj := Obj) -> structures.Type__ImmutableOrderedMultiDict
.Type__ImmutableOrderedMultiDict._iter_hashitems: (self: Never) -> global::Enumerate(Never)
.Type__ImmutableOrderedMultiDict.copy: (self: structures.Type__ImmutableOrderedMultiDict) -> ClassType
.Type__ImmutableOrderedMultiDict.__copy__: (self: structures.Type__ImmutableOrderedMultiDict) -> Never

.CallbackDict: ClassType
.CallbackDict <: Never
.CallbackDict.on_update: Never
.CallbackDict.__call__: (initial: Obj := Obj, on_update: Obj := Obj) -> structures.CallbackDict
.CallbackDict.__repr__: (self: structures.CallbackDict) -> Str

.HeaderSet: ClassType
.HeaderSet <: Never
.HeaderSet._headers: Never
.HeaderSet._set: Never
.HeaderSet.on_update: Never
.HeaderSet.__call__: (headers: Obj := Obj, on_update: Obj := Obj) -> structures.HeaderSet
.HeaderSet.add: (self: structures.HeaderSet, header: Str) -> NoneType
.HeaderSet.remove: (self: Obj, header: Str) -> NoneType
.HeaderSet.update: (self: Obj, iterable: global::Iterable(Structural({.lower = (self: Obj) -> Never}))) -> NoneType
.HeaderSet.discard: (self: structures.HeaderSet, header: Str) -> NoneType
.HeaderSet.find: (self: structures.HeaderSet, header: Str) -> Int
.HeaderSet.index: (self: structures.HeaderSet, header: Str) -> Int
.HeaderSet.clear: (self: Obj) -> NoneType
.HeaderSet.as_set: (self: structures.HeaderSet, preserve_casing: Bool := Bool) -> global::Set!(Never, _: Nat)
.HeaderSet.to_header: (self: structures.HeaderSet) -> Str
.HeaderSet.__getitem__: (self: structures.HeaderSet, idx: Obj) -> Str
.HeaderSet.__delitem__: (self: Obj, idx: Obj) -> NoneType
.HeaderSet.__setitem__: (self: Obj, idx: Obj, value: Str) -> NoneType
.HeaderSet.__contains__: (self: structures.HeaderSet, header: Str) -> Bool
.HeaderSet.__len__: (self: structures.HeaderSet) -> Int
.HeaderSet.__iter__: |I <: global::Iterable(?T), T: Type|(self: structures.HeaderSet) -> ?I.Iterator
.HeaderSet.__bool__: (self: structures.HeaderSet) -> Bool
.HeaderSet.__str__: (self: structures.HeaderSet) -> Str
.HeaderSet.__repr__: (self: structures.HeaderSet) -> Str

.___v_desugar_9 = pyimport "__init__"

.http: Never
.__getattr__: (name: Str) -> Never
