##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/werkzeug/datastructures/accept.py 1736025949 12177
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.codecs = pyimport "<failure>"


.cabc = pyimport "<failure>"


.re = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_2 = pyimport "structures"
.structures = pyimport "structures"
.ImmutableList: Never
.Accept: ClassType
.Accept <: Never
.Accept.__call__: (values: Obj := Obj) -> accept.Accept
.Accept._specificity: (self: accept.Accept, value: Str) -> global::HomogenousTuple(Bool)
.Accept._value_matches: (self: accept.Accept, value: Str, item: Str) -> Bool
.Accept.__getitem__: (self: accept.Accept, key: Obj) -> Float or global::List!(global::Tuple([Str, Float]), _: Nat) or global::Tuple([Str, Float])
.Accept.__getitem__: (self: accept.Accept, key: Obj) -> Float or global::List!(global::Tuple([Str, Float]), _: Nat) or global::Tuple([Str, Float])
.Accept.__getitem__: (self: accept.Accept, key: Obj) -> Float or global::List!(global::Tuple([Str, Float]), _: Nat) or global::Tuple([Str, Float])
.Accept.__getitem__: (self: accept.Accept, key: Obj) -> Float or global::List!(global::Tuple([Str, Float]), _: Nat) or global::Tuple([Str, Float])
.Accept.quality: (self: accept.Accept, key: Str) -> Float
.Accept.__contains__: (self: accept.Accept, value: Str) -> Bool
.Accept.__repr__: (self: accept.Accept) -> Str
.Accept.index: (self: accept.Accept, key: global::Tuple([Str, Float]) or Str) -> Int
.Accept.find: (self: accept.Accept, key: global::Tuple([Str, Float]) or Str) -> Int
.Accept.values: (self: accept.Accept) -> NoneType
.Accept.to_header: (self: accept.Accept) -> Str
.Accept.__str__: (self: accept.Accept) -> Str
.Accept._best_single_match: (self: accept.Accept, match: Str) -> NoneType or global::Tuple([Str, Float])
.Accept.best_match: (self: accept.Accept, matches: Obj) -> NoneType or Str
.Accept.best_match: (self: accept.Accept, matches: Obj, default: Str := Str) -> Str
.Accept.best_match: (self: accept.Accept, matches: global::Iterable(Str), default: NoneType or Str := NoneType or Str) -> NoneType or Str
.Accept.best: (self: accept.Accept) -> NoneType or Str

._mime_split_re: Never
._normalize_mime: (value: Str) -> global::List!(Str, _: Nat)
.MIMEAccept: ClassType
accept = pyimport "accept"
.MIMEAccept <: .Accept
.MIMEAccept._specificity: (self: accept.MIMEAccept, value: Str) -> global::HomogenousTuple(Bool)
.MIMEAccept._value_matches: (self: accept.MIMEAccept, value: Str, item: Str) -> Bool
.MIMEAccept.accept_html: (self: accept.MIMEAccept) -> Bool
.MIMEAccept.accept_xhtml: (self: accept.MIMEAccept) -> Bool
.MIMEAccept.accept_json: (self: accept.MIMEAccept) -> Bool

._locale_delim_re: Never
._normalize_lang: (value: Str) -> global::List!(Str, _: Nat)
.LanguageAccept: ClassType
.LanguageAccept <: .Accept
.LanguageAccept._value_matches: (self: accept.LanguageAccept, value: Str, item: Str) -> Bool
.LanguageAccept.best_match: (self: accept.LanguageAccept, matches: Obj) -> NoneType or Str
.LanguageAccept.best_match: (self: accept.LanguageAccept, matches: Obj, default: Str := Str) -> Str
.LanguageAccept.best_match: (self: accept.LanguageAccept, matches: global::Iterable(Never), default: NoneType or Str := NoneType or Str) -> NoneType or Str

.CharsetAccept: ClassType
.CharsetAccept <: .Accept
.CharsetAccept._value_matches: (self: accept.CharsetAccept, value: Str, item: Str) -> Bool

