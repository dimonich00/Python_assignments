##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/jinja2/idtracking.py 1736025949 10555
.t = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.___v_desugar_1 = pyimport "__init__"
.__init__ = pyimport "__init__"
.nodes: Never
.___v_desugar_2 = pyimport "visitor"
.visitor = pyimport "visitor"
.NodeVisitor: Never

.VAR_LOAD_PARAMETER: {"param"}
.VAR_LOAD_RESOLVE: {"resolve"}
.VAR_LOAD_ALIAS: {"alias"}
.VAR_LOAD_UNDEFINED: {"undefined"}
.find_symbols: (nodes: global::Iterable(Never), parent_symbols: Obj := Obj) -> Never
.symbols_for_node: (node: Obj, parent_symbols: Obj := Obj) -> Never
.Symbols: ClassType
.Symbols.stores: Never
.Symbols.loads: Never
.Symbols.level: Never
.Symbols.refs: Never
.Symbols.parent: Never
.Symbols.__call__: |Type_34774 :> {None}|(parent: Obj := Obj, level: Type_34774 := Type_34774 and Type_34774) -> idtracking.Symbols
.Symbols.analyze_node: (self: idtracking.Symbols, node: Obj, **kwargs := Obj) -> NoneType
.Symbols._define_ref: (self: idtracking.Symbols, name: Str, load: Obj := Obj) -> Str
.Symbols.find_load: (self: idtracking.Symbols, target: Str) -> {None}
.Symbols.find_ref: (self: idtracking.Symbols, name: Str) -> {None}
.Symbols.ref: (self: idtracking.Symbols, name: Str) -> Str
.Symbols.copy: (self: idtracking.Symbols) -> Never
.Symbols.store: (self: idtracking.Symbols, name: Str) -> NoneType
.Symbols.declare_parameter: (self: idtracking.Symbols, name: Str) -> Str
.Symbols.load: (self: idtracking.Symbols, name: Str) -> NoneType
.Symbols.branch_update: (self: idtracking.Symbols, branch_symbols: global::Iterable(Structural({.loads = Ref(Obj); .refs = Ref(Obj); .stores = Ref(Obj)}))) -> NoneType
.Symbols.dump_stores: (self: idtracking.Symbols) -> Never
.Symbols.dump_param_targets: (self: idtracking.Symbols) -> Never

.RootVisitor: ClassType
.RootVisitor <: Never
.RootVisitor.sym_visitor: Never
.RootVisitor.__call__: (symbols: idtracking.Symbols) -> idtracking.RootVisitor
.RootVisitor._simple_visit: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_Template: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_Block: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_Macro: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_FilterBlock: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_Scope: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_If: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_ScopedEvalContextModifier: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_AssignBlock: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_CallBlock: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_OverlayScope: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.visit_For: (self: idtracking.RootVisitor, node: Obj, for_branch: Str := Str, **kwargs := Obj) -> NoneType
.RootVisitor.visit_With: (self: idtracking.RootVisitor, node: Obj, **kwargs := Obj) -> NoneType
.RootVisitor.generic_visit: (self: idtracking.RootVisitor, node: Obj, *args: Obj, **kwargs := Obj) -> NoneType

.FrameSymbolVisitor: ClassType
.FrameSymbolVisitor <: Never
.FrameSymbolVisitor.__call__: (symbols: idtracking.Symbols) -> idtracking.FrameSymbolVisitor
.FrameSymbolVisitor.visit_Name: (self: idtracking.FrameSymbolVisitor, node: Obj, store_as_param: Bool := Bool, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_NSRef: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_If: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_Macro: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_Import: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_FromImport: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_Assign: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_For: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_CallBlock: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_FilterBlock: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_With: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_AssignBlock: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_Scope: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_Block: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType
.FrameSymbolVisitor.visit_OverlayScope: (self: idtracking.FrameSymbolVisitor, node: Obj, **kwargs := Obj) -> NoneType

