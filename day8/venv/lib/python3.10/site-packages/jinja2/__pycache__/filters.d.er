##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/jinja2/filters.py 1736025949 55025

.math = pyimport "<failure>"
.<failure> = pyimport "<failure>"

.random = pyimport "<failure>"


.re = pyimport "<failure>"


.typing = pyimport "<failure>"


.t = pyimport "<failure>"


.___v_desugar_1 = pyimport "<failure>"

.abc: Never
.___v_desugar_2 = pyimport "<failure>"

.chain: Never
.___v_desugar_3 = pyimport "<failure>"

.groupby: Never
.___v_desugar_4 = pyimport "__init__"
.__init__ = pyimport "__init__"
.escape: (s: Obj) -> Never
.___v_desugar_5 = pyimport "__init__"

.Markup: {markupsafe.Markup}
.___v_desugar_6 = pyimport "__init__"

.soft_str: (s: Obj) -> Str
.___v_desugar_7 = pyimport "async_utils"
.async_utils = pyimport "async_utils"
.async_variant: (normal_func: Obj) -> global::Subroutine
.___v_desugar_8 = pyimport "async_utils"

.auto_aiter: (iterable: Obj) -> Never
.___v_desugar_9 = pyimport "async_utils"

.auto_await: (value: Obj) -> Never
.___v_desugar_10 = pyimport "async_utils"

.auto_to_list: (value: Obj) -> Never
.___v_desugar_11 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.FilterArgumentError: {exceptions.FilterArgumentError}
.___v_desugar_12 = pyimport "runtime"
.runtime = pyimport "runtime"
.Undefined: {runtime.Undefined}
.___v_desugar_13 = pyimport "utils"
.utils = pyimport "utils"
.htmlsafe_json_dumps: (obj: Obj, dumps: Obj := Obj, **kwargs := Obj) -> markupsafe.Markup
.___v_desugar_14 = pyimport "utils"

.pass_context: (f: Obj) -> Never
.___v_desugar_15 = pyimport "utils"

.pass_environment: (f: Obj) -> Never
.___v_desugar_16 = pyimport "utils"

.pass_eval_context: (f: Obj) -> Never
.___v_desugar_17 = pyimport "utils"

.pformat: (obj: Obj) -> Str
.___v_desugar_18 = pyimport "utils"

.url_quote: (obj: Obj, charset: Str := Str and Str, for_qs: Bool := Bool and Bool) -> Str
.___v_desugar_19 = pyimport "utils"

.urlize: (text: Str, trim_url_limit: Obj := Obj, rel: Obj := Obj, target: Obj := Obj, extra_schemes: global::Iterable(Never) := global::Iterable(Never)) -> Str

.F: Never
.K: Never
.V: Never
.ignore_case: (value: Obj) -> Never
.make_attrgetter: (environment: Obj, attribute: Obj, postprocess: Obj := Obj, default: Obj := Obj) -> (item: Never) -> Never
.make_multi_attrgetter: (environment: Obj, attribute: Obj, postprocess: Obj := Obj) -> (item: Never) -> Never
._prepare_attribute_parts: |T :> global::List!(?T, 1), T <: global::Iterable(?T), T: Type|(attr: T) -> T
.do_forceescape: (value: Obj) -> markupsafe.Markup
.do_urlencode: (value: Obj) -> Str
.do_replace: (eval_ctx: Obj, s: Str, old: Str, new: Str, count: Int := Int) -> Str
.do_upper: (s: Str) -> Str
.do_lower: (s: Str) -> Str
.do_items: (value: Obj) -> Never
._attr_key_re: Never
.do_xmlattr: |Type_53406: Type, Type_52215 <: Structural({.items = (self: Obj) -> ?53406})|(eval_ctx: Obj, d: Type_52215, autospace: Bool := {True} and Bool) -> Str
.do_capitalize: (s: Str) -> Str
._word_beginning_split_re: Never
.do_title: (s: Str) -> Str
.do_dictsort: |Type_52218 <: Structural({.items = (self: Obj) -> ?53572}), Type_53572: Type, T: Type|(value: Type_52218, case_sensitive: Bool := {False} and Bool, by: Obj := {"key"}, reverse: Bool := {False} and Bool) -> global::List!(T, _: Nat)
.do_sort: (environment: Obj, value: Obj, reverse: Bool := Bool, case_sensitive: Bool := Bool, attribute: Obj := Obj) -> Never
.sync_do_unique: (environment: Obj, value: Obj, case_sensitive: Bool := Bool, attribute: Obj := Obj) -> Never
.do_unique: (environment: Obj, value: Obj, case_sensitive: Bool := Bool, attribute: Obj := Obj) -> Never
._min_or_max: (environment: Obj, value: Obj, func: Obj, case_sensitive: Bool, attribute: Obj) -> Never
.do_min: (environment: Obj, value: Obj, case_sensitive: Bool := Bool, attribute: Obj := Obj) -> Never
.do_max: (environment: Obj, value: Obj, case_sensitive: Bool := Bool, attribute: Obj := Obj) -> Never
.do_default: (value: Obj, default_value: Obj := Obj, boolean: Bool := Bool) -> Never
.sync_do_join: (eval_ctx: Obj, value: global::Iterable(Never), d: Str := Str, attribute: Obj := Obj) -> Str
.do_join: (eval_ctx: Obj, value: Obj, d: Str := Str, attribute: Obj := Obj) -> Str
.do_center: (value: Str, width: Int := Int) -> Str
.sync_do_first: (environment: Obj, seq: Obj) -> Never
.do_first: (environment: Obj, seq: Obj) -> Never
.do_last: (environment: Obj, seq: Obj) -> Never
.do_random: (context: Obj, seq: Obj) -> Never
.do_filesizeformat: (value: Obj, binary: Bool := Bool) -> Str
.do_pprint: (value: Obj) -> Str
._uri_scheme_re: Never
.do_urlize: (eval_ctx: Obj, value: Str, trim_url_limit: Obj := Obj, nofollow: Bool := Bool, target: Obj := Obj, rel: Structural({.__or__ = (self: Never, Obj) -> Str}) := {None} and Structural({.__or__ = (self: Never, Obj) -> Str}), extra_schemes: global::Iterable(Never) := {None} and global::Iterable(Never)) -> Str
.do_indent: (s: Str, width: Nat := Nat, first: Bool := Bool, blank: Bool := Bool) -> Str
.do_truncate: (env: Obj, s: Str, length: Int := Int, killwords: Bool := Bool, end: Str := Str, leeway: Structural({.__ge__ = (self: Never, Obj) -> Bool}) := {None} and Structural({.__ge__ = (self: Never, Obj) -> Bool})) -> Str
.do_wordwrap: (environment: Obj, s: Str, width: Int := Int, break_long_words: Bool := Bool, wrapstring: Structural({.join = (self: Obj, Obj) -> global::Bytes or Str and (self: Obj, Obj) -> Str}) := {None} and Structural({.join = (self: Obj, Obj) -> global::Bytes or Str and (self: Obj, Obj) -> Str}), break_on_hyphens: Bool := {True} and Bool) -> Str
._word_re: Never
.do_wordcount: (s: Str) -> Int
.do_int: (value: Obj, default: Int := Int, base: Int := Int) -> Int
.do_float: (value: Obj, default: Float := Float) -> Float
.do_format: (value: Str, *args: Obj, **kwargs := Obj) -> Str
.do_trim: (value: Str, chars: NoneType or Str := NoneType or Str) -> Str
.do_striptags: (value: Obj) -> Str
.sync_do_slice: (value: Obj, slices: Int, fill_with: Obj := Obj) -> Never
.do_slice: (value: Obj, slices: Int, fill_with: Obj := Obj) -> Never
.do_batch: (value: Obj, linecount: Int, fill_with: Obj := Obj) -> Never
.do_round: (value: Float, precision: Int := Int, method: Obj := Obj) -> Float
.Type__GroupTuple: ClassType
.Type__GroupTuple <: Never
.Type__GroupTuple.GenericList: Never
.Type__GroupTuple.grouper: Never
.Type__GroupTuple.__repr__: (self: filters.Type__GroupTuple) -> Str
.Type__GroupTuple.__str__: (self: filters.Type__GroupTuple) -> Str

.sync_do_groupby: (environment: Obj, value: Obj, attribute: Obj, default: Obj := Obj, case_sensitive: Bool := Bool) -> Never
.do_groupby: (environment: Obj, value: Obj, attribute: Obj, default: Obj := Obj, case_sensitive: Bool := Bool) -> Never
.sync_do_sum: (environment: Obj, iterable: Obj, attribute: Obj := Obj, start: Obj := Obj) -> Never
.do_sum: (environment: Obj, iterable: Obj, attribute: Obj := Obj, start: Obj := Obj) -> Never
.sync_do_list: (value: Obj) -> Never
.do_list: (value: Obj) -> Never
.do_mark_safe: (value: Str) -> markupsafe.Markup
.do_mark_unsafe: (value: Str) -> Str
.do_reverse: (value: Str) -> Str
.do_reverse: (value: Obj) -> Never
.do_reverse: (value: global::Sequence(Never)) -> Never
.do_attr: (environment: Obj, obj: Obj, name: Str) -> Never
.sync_do_map: (context: Obj, value: Obj, name: Str, *args: Obj, **kwargs := Obj) -> {Ellipsis}
.sync_do_map: (context: Obj, value: Obj, attribute: Str := Str, default: Obj := Obj) -> {Ellipsis}
.sync_do_map: (context: Obj, value: Never, *args: Obj, **kwargs := Obj) -> NoneType
.do_map: (context: Obj, value: Obj, name: Str, *args: Obj, **kwargs := Obj) -> {Ellipsis}
.do_map: (context: Obj, value: Obj, attribute: Str := Str, default: Obj := Obj) -> {Ellipsis}
.do_map: (context: Obj, value: Bool, *args: Obj, **kwargs := Obj) -> NoneType
.sync_do_select: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.do_select: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.sync_do_reject: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.do_reject: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.sync_do_selectattr: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.do_selectattr: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.sync_do_rejectattr: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.do_rejectattr: (context: Obj, value: Obj, *args: Obj, **kwargs := Obj) -> Never
.do_tojson: (eval_ctx: Obj, value: Obj, indent: Obj := Obj) -> markupsafe.Markup
.prepare_map: (context: Obj, args: global::List(Obj, _: Nat), kwargs: global::Dict({Str: Obj})) -> (item: Never) -> Never
.prepare_select_or_reject: |Type_55259: Type|(context: Obj, args: global::Indexable(Obj, global::Indexable(Obj, Obj)), kwargs: Obj, modfunc: (Obj) -> Type_55259, lookup_attr: Bool) -> (item: Obj) -> Never
.select_or_reject: (context: Obj, value: Obj, args: global::Indexable(Obj, global::Indexable(Obj, Obj)), kwargs: Obj, modfunc: (Obj) -> Bool, lookup_attr: Bool) -> Never
.async_select_or_reject: (context: Obj, value: Obj, args: global::Indexable(Obj, global::Indexable(Obj, Obj)), kwargs: Obj, modfunc: (Obj) -> Bool, lookup_attr: Bool) -> Never
.FILTERS: Never
