##[pylyzer] failed /home/dmitry/progs/python/WISCourse/Python_assignments/day8/venv/lib/python3.10/site-packages/blinker/base.py 1736025949 19132
.___v_desugar_1 = pyimport "<failure>"
.<failure> = pyimport "<failure>"
.annotations: Never
.c = pyimport "<failure>"


.sys = pyimport "<failure>"


.t = pyimport "<failure>"


.weakref = pyimport "<failure>"


.___v_desugar_2 = pyimport "<failure>"

.defaultdict: Never
.___v_desugar_3 = pyimport "<failure>"

.contextmanager: Never
.___v_desugar_4 = pyimport "<failure>"

.cached_property: Never
.___v_desugar_5 = pyimport "<failure>"

.iscoroutinefunction: Never
.___v_desugar_6 = pyimport "_utilities"
._utilities = pyimport "_utilities"
.make_id: (obj: Obj) -> Never
.___v_desugar_7 = pyimport "_utilities"

.make_ref: (obj: Obj, callback: Obj := Obj) -> Never
.___v_desugar_8 = pyimport "_utilities"

.Symbol: {_utilities.Symbol}
.F: Never
.ANY: Never

.ANY_ID: {0}
.Signal: ClassType
.Signal._weak_senders: global::Dict!({Never: Never})
.Signal.is_muted: Bool
.Signal.receivers: global::Dict!({Never: Never})
.Signal._by_receiver: global::Dict!({Never: Never})
.Signal._by_sender: global::Dict!({Never: Never})
.Signal.__call__: (doc: NoneType or Str := NoneType or Str) -> base.Signal
.Signal.ANY: Never
.Signal.set_class: Never
.Signal.receiver_connected: (self: base.Signal) -> base.Signal
.Signal.receiver_disconnected: (self: base.Signal) -> base.Signal
.Signal.connect: (self: base.Signal, receiver: Obj, sender: Obj := Obj, weak: Bool := Bool) -> Never
.Signal.connect_via: (self: base.Signal, sender: Obj, weak: Bool := Bool) -> (fn: Never) -> Never
.Signal.connected_to: (self: base.Signal, receiver: Obj, sender: Obj := Obj) -> Never
.Signal.muted: (self: base.Signal) -> Never
.Signal.send: Never
.Signal.send_async: Never
.Signal.has_receivers_for: (self: base.Signal, sender: Obj) -> Bool
.Signal.receivers_for: (self: base.Signal, sender: Obj) -> global::Iterable(Never)
.Signal.disconnect: (self: base.Signal, receiver: Obj, sender: Obj := Obj) -> NoneType
.Signal._disconnect: (self: base.Signal, receiver_id: Obj, sender_id: Obj) -> NoneType
.Signal._make_cleanup_receiver: (self: base.Signal, receiver_id: Obj) -> (ref: Obj) -> NoneType
.Signal._make_cleanup_sender: (self: base.Signal, sender_id: Obj) -> (ref: Obj) -> NoneType
.Signal._cleanup_bookkeeping: (self: base.Signal) -> NoneType
.Signal._clear_state: (self: base.Signal) -> NoneType

.NamedSignal: ClassType
base = pyimport "base"
.NamedSignal <: .Signal
.NamedSignal.name: Str
.NamedSignal.__call__: (name: Str, doc: NoneType or Str := NoneType or Str) -> base.NamedSignal
.NamedSignal.__repr__: (self: base.NamedSignal) -> Str

.Namespace: ClassType
.Namespace <: global::Dict!({Str: base.NamedSignal})
.Namespace.signal: (self: base.Namespace, name: Str, doc: NoneType or Str := NoneType or Str) -> base.NamedSignal

.Type__PNamespaceSignal: ClassType
.Type__PNamespaceSignal <: Never
.Type__PNamespaceSignal.__call__: (self: base.Type__PNamespaceSignal, name: Str, doc: NoneType or Str := NoneType or Str) -> base.NamedSignal

.default_namespace: .Namespace

.signal: (self: base.Namespace, name: Str, doc: NoneType or Str := NoneType or Str) -> base.NamedSignal

